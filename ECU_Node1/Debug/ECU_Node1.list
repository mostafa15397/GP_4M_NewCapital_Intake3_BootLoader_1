
ECU_Node1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080028cc  080028cc  000128cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028f4  080028f4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080028f4  080028f4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028f4  080028f4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028f4  080028f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f8  080028f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080028fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000001c  08002918  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08002918  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005508  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001869  00000000  00000000  00025590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  00026e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b8  00000000  00000000  00027490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016385  00000000  00000000  00027948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000066fb  00000000  00000000  0003dccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f626  00000000  00000000  000443c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000017a8  00000000  00000000  000c39f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000c5198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028b4 	.word	0x080028b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080028b4 	.word	0x080028b4

0800014c <FPEC_voidEraseAppArea>:
#include "FPEC_interface.h"
#include "FPEC_private.h"
#include "FPEC_config.h"

void FPEC_voidEraseAppArea(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	u8 Local_u8PageNumber;
	for (Local_u8PageNumber = 4 ; Local_u8PageNumber < 64 ; Local_u8PageNumber++)
 8000152:	2304      	movs	r3, #4
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e006      	b.n	8000166 <FPEC_voidEraseAppArea+0x1a>
	{
		/* send the page number to erase it */
		FPEC_voidFlashPageErase(Local_u8PageNumber);
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4618      	mov	r0, r3
 800015c:	f000 f80c 	bl	8000178 <FPEC_voidFlashPageErase>
	for (Local_u8PageNumber = 4 ; Local_u8PageNumber < 64 ; Local_u8PageNumber++)
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	3301      	adds	r3, #1
 8000164:	71fb      	strb	r3, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	2b3f      	cmp	r3, #63	; 0x3f
 800016a:	d9f5      	bls.n	8000158 <FPEC_voidEraseAppArea+0xc>
	}
}
 800016c:	bf00      	nop
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
	...

08000178 <FPEC_voidFlashPageErase>:

void FPEC_voidFlashPageErase(u8 Copy_u8PageNumber)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]
	/* Wait Busy Flag */
	while(GET_BIT(FPEC->SR,0) == 1);
 8000182:	bf00      	nop
 8000184:	4b1e      	ldr	r3, [pc, #120]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 8000186:	68db      	ldr	r3, [r3, #12]
 8000188:	f003 0301 	and.w	r3, r3, #1
 800018c:	2b01      	cmp	r3, #1
 800018e:	d0f9      	beq.n	8000184 <FPEC_voidFlashPageErase+0xc>
	/* Check if FPEC is locked or not */
	if ( GET_BIT(FPEC->CR,7) == 1)
 8000190:	4b1b      	ldr	r3, [pc, #108]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 8000192:	691b      	ldr	r3, [r3, #16]
 8000194:	09db      	lsrs	r3, r3, #7
 8000196:	f003 0301 	and.w	r3, r3, #1
 800019a:	2b01      	cmp	r3, #1
 800019c:	d105      	bne.n	80001aa <FPEC_voidFlashPageErase+0x32>
	{
		FPEC->KEYR = 0x45670123;
 800019e:	4b18      	ldr	r3, [pc, #96]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <FPEC_voidFlashPageErase+0x8c>)
 80001a2:	605a      	str	r2, [r3, #4]
		FPEC->KEYR = 0xCDEF89AB;
 80001a4:	4b16      	ldr	r3, [pc, #88]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001a6:	4a18      	ldr	r2, [pc, #96]	; (8000208 <FPEC_voidFlashPageErase+0x90>)
 80001a8:	605a      	str	r2, [r3, #4]
	}
	/* Page Erase Operation */
	SET_BIT(FPEC->CR,1);
 80001aa:	4b15      	ldr	r3, [pc, #84]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001ac:	691b      	ldr	r3, [r3, #16]
 80001ae:	4a14      	ldr	r2, [pc, #80]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001b0:	f043 0302 	orr.w	r3, r3, #2
 80001b4:	6113      	str	r3, [r2, #16]
	/* Write Page address */
	FPEC->AR = (u32)(Copy_u8PageNumber * 1024) + 0x08000000 ;
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	029b      	lsls	r3, r3, #10
 80001ba:	4a11      	ldr	r2, [pc, #68]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001bc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80001c0:	6153      	str	r3, [r2, #20]
	/* Start operation */
	SET_BIT(FPEC->CR,6);
 80001c2:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001c4:	691b      	ldr	r3, [r3, #16]
 80001c6:	4a0e      	ldr	r2, [pc, #56]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001cc:	6113      	str	r3, [r2, #16]
	/* Wait Busy Flag */
	while (GET_BIT(FPEC->SR,0) == 1);
 80001ce:	bf00      	nop
 80001d0:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	f003 0301 	and.w	r3, r3, #1
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d0f9      	beq.n	80001d0 <FPEC_voidFlashPageErase+0x58>
	/* EOP */
	SET_BIT(FPEC->SR,5);
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001e2:	f043 0320 	orr.w	r3, r3, #32
 80001e6:	60d3      	str	r3, [r2, #12]
	CLR_BIT(FPEC->CR,1);
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001ea:	691b      	ldr	r3, [r3, #16]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <FPEC_voidFlashPageErase+0x88>)
 80001ee:	f023 0302 	bic.w	r3, r3, #2
 80001f2:	6113      	str	r3, [r2, #16]
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40022000 	.word	0x40022000
 8000204:	45670123 	.word	0x45670123
 8000208:	cdef89ab 	.word	0xcdef89ab

0800020c <FPEC_voidFlashWrite>:

void FPEC_voidFlashWrite(u32 Copy_u32Address, u16* Copy_u16Data, u8 Copy_u8Length)
{
 800020c:	b480      	push	{r7}
 800020e:	b087      	sub	sp, #28
 8000210:	af00      	add	r7, sp, #0
 8000212:	60f8      	str	r0, [r7, #12]
 8000214:	60b9      	str	r1, [r7, #8]
 8000216:	4613      	mov	r3, r2
 8000218:	71fb      	strb	r3, [r7, #7]
	u8 Local_DataCounter;
	/* Wait Busy Flag */
	while (GET_BIT(FPEC->SR,0) == 1);
 800021a:	bf00      	nop
 800021c:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	2b01      	cmp	r3, #1
 8000226:	d0f9      	beq.n	800021c <FPEC_voidFlashWrite+0x10>
	/* Check if FPEC is locked or not */
	if ( /* FPEC_CR->BitAccess.LOCK == 1 */ GET_BIT(FPEC->CR,7) == 1 )
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	09db      	lsrs	r3, r3, #7
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	2b01      	cmp	r3, #1
 8000234:	d105      	bne.n	8000242 <FPEC_voidFlashWrite+0x36>
	{
		FPEC -> KEYR = 0x45670123;
 8000236:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 8000238:	4a1c      	ldr	r2, [pc, #112]	; (80002ac <FPEC_voidFlashWrite+0xa0>)
 800023a:	605a      	str	r2, [r3, #4]
		FPEC -> KEYR = 0xCDEF89AB;
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 800023e:	4a1c      	ldr	r2, [pc, #112]	; (80002b0 <FPEC_voidFlashWrite+0xa4>)
 8000240:	605a      	str	r2, [r3, #4]
	}
	for (Local_DataCounter = 0; Local_DataCounter< Copy_u8Length; Local_DataCounter++)
 8000242:	2300      	movs	r3, #0
 8000244:	75fb      	strb	r3, [r7, #23]
 8000246:	e025      	b.n	8000294 <FPEC_voidFlashWrite+0x88>
	{
		/* Write Flash Programming */
		SET_BIT(FPEC->CR,0);
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 800024a:	691b      	ldr	r3, [r3, #16]
 800024c:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6113      	str	r3, [r2, #16]
		/* Half word operation */
		*((volatile u16*)Copy_u32Address) = Copy_u16Data[Local_DataCounter];
 8000254:	7dfb      	ldrb	r3, [r7, #23]
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	68ba      	ldr	r2, [r7, #8]
 800025a:	441a      	add	r2, r3
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	8812      	ldrh	r2, [r2, #0]
 8000260:	801a      	strh	r2, [r3, #0]
		Copy_u32Address += 2 ;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	3302      	adds	r3, #2
 8000266:	60fb      	str	r3, [r7, #12]
		/* Wait Busy Flag */
		while (GET_BIT(FPEC->SR,0) == 1);
 8000268:	bf00      	nop
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	2b01      	cmp	r3, #1
 8000274:	d0f9      	beq.n	800026a <FPEC_voidFlashWrite+0x5e>
		/* EOP */
		SET_BIT(FPEC->SR,5);
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 800027c:	f043 0320 	orr.w	r3, r3, #32
 8000280:	60d3      	str	r3, [r2, #12]
		CLR_BIT(FPEC->CR,0);
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	4a08      	ldr	r2, [pc, #32]	; (80002a8 <FPEC_voidFlashWrite+0x9c>)
 8000288:	f023 0301 	bic.w	r3, r3, #1
 800028c:	6113      	str	r3, [r2, #16]
	for (Local_DataCounter = 0; Local_DataCounter< Copy_u8Length; Local_DataCounter++)
 800028e:	7dfb      	ldrb	r3, [r7, #23]
 8000290:	3301      	adds	r3, #1
 8000292:	75fb      	strb	r3, [r7, #23]
 8000294:	7dfa      	ldrb	r2, [r7, #23]
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	429a      	cmp	r2, r3
 800029a:	d3d5      	bcc.n	8000248 <FPEC_voidFlashWrite+0x3c>
	}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	371c      	adds	r7, #28
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	40022000 	.word	0x40022000
 80002ac:	45670123 	.word	0x45670123
 80002b0:	cdef89ab 	.word	0xcdef89ab

080002b4 <GPIO_VidSetPinDirection>:
#include "GPIO_config.h"
#include "GPIO_interface.h"
#include "GPIO_private.h"

void GPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode )
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
 80002be:	460b      	mov	r3, r1
 80002c0:	71bb      	strb	r3, [r7, #6]
 80002c2:	4613      	mov	r3, r2
 80002c4:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	d07a      	beq.n	80003c2 <GPIO_VidSetPinDirection+0x10e>
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	f300 80b1 	bgt.w	8000434 <GPIO_VidSetPinDirection+0x180>
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d002      	beq.n	80002dc <GPIO_VidSetPinDirection+0x28>
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d03a      	beq.n	8000350 <GPIO_VidSetPinDirection+0x9c>
				Copy_u8Pin = Copy_u8Pin - 8;
				GPIOC_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
				GPIOC_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
			}
			break;
		default :break;
 80002da:	e0ab      	b.n	8000434 <GPIO_VidSetPinDirection+0x180>
			if(Copy_u8Pin <= 7 )
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d817      	bhi.n	8000312 <GPIO_VidSetPinDirection+0x5e>
				GPIOA_CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 80002e2:	4b5a      	ldr	r3, [pc, #360]	; (800044c <GPIO_VidSetPinDirection+0x198>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	79ba      	ldrb	r2, [r7, #6]
 80002e8:	0092      	lsls	r2, r2, #2
 80002ea:	210f      	movs	r1, #15
 80002ec:	fa01 f202 	lsl.w	r2, r1, r2
 80002f0:	43d2      	mvns	r2, r2
 80002f2:	4611      	mov	r1, r2
 80002f4:	4a55      	ldr	r2, [pc, #340]	; (800044c <GPIO_VidSetPinDirection+0x198>)
 80002f6:	400b      	ands	r3, r1
 80002f8:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80002fa:	4b54      	ldr	r3, [pc, #336]	; (800044c <GPIO_VidSetPinDirection+0x198>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	7979      	ldrb	r1, [r7, #5]
 8000300:	79ba      	ldrb	r2, [r7, #6]
 8000302:	0092      	lsls	r2, r2, #2
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	4611      	mov	r1, r2
 800030a:	4a50      	ldr	r2, [pc, #320]	; (800044c <GPIO_VidSetPinDirection+0x198>)
 800030c:	430b      	orrs	r3, r1
 800030e:	6013      	str	r3, [r2, #0]
			break;
 8000310:	e092      	b.n	8000438 <GPIO_VidSetPinDirection+0x184>
			else if(Copy_u8Pin <=15 )
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	2b0f      	cmp	r3, #15
 8000316:	f200 808f 	bhi.w	8000438 <GPIO_VidSetPinDirection+0x184>
				Copy_u8Pin = Copy_u8Pin - 8;
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	3b08      	subs	r3, #8
 800031e:	71bb      	strb	r3, [r7, #6]
				GPIOA_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000320:	4b4b      	ldr	r3, [pc, #300]	; (8000450 <GPIO_VidSetPinDirection+0x19c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	79ba      	ldrb	r2, [r7, #6]
 8000326:	0092      	lsls	r2, r2, #2
 8000328:	210f      	movs	r1, #15
 800032a:	fa01 f202 	lsl.w	r2, r1, r2
 800032e:	43d2      	mvns	r2, r2
 8000330:	4611      	mov	r1, r2
 8000332:	4a47      	ldr	r2, [pc, #284]	; (8000450 <GPIO_VidSetPinDirection+0x19c>)
 8000334:	400b      	ands	r3, r1
 8000336:	6013      	str	r3, [r2, #0]
				GPIOA_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 8000338:	4b45      	ldr	r3, [pc, #276]	; (8000450 <GPIO_VidSetPinDirection+0x19c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	7979      	ldrb	r1, [r7, #5]
 800033e:	79ba      	ldrb	r2, [r7, #6]
 8000340:	0092      	lsls	r2, r2, #2
 8000342:	fa01 f202 	lsl.w	r2, r1, r2
 8000346:	4611      	mov	r1, r2
 8000348:	4a41      	ldr	r2, [pc, #260]	; (8000450 <GPIO_VidSetPinDirection+0x19c>)
 800034a:	430b      	orrs	r3, r1
 800034c:	6013      	str	r3, [r2, #0]
			break;
 800034e:	e073      	b.n	8000438 <GPIO_VidSetPinDirection+0x184>
			if(Copy_u8Pin <= 7 )
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	2b07      	cmp	r3, #7
 8000354:	d817      	bhi.n	8000386 <GPIO_VidSetPinDirection+0xd2>
				GPIOB_CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 8000356:	4b3f      	ldr	r3, [pc, #252]	; (8000454 <GPIO_VidSetPinDirection+0x1a0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	79ba      	ldrb	r2, [r7, #6]
 800035c:	0092      	lsls	r2, r2, #2
 800035e:	210f      	movs	r1, #15
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	43d2      	mvns	r2, r2
 8000366:	4611      	mov	r1, r2
 8000368:	4a3a      	ldr	r2, [pc, #232]	; (8000454 <GPIO_VidSetPinDirection+0x1a0>)
 800036a:	400b      	ands	r3, r1
 800036c:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800036e:	4b39      	ldr	r3, [pc, #228]	; (8000454 <GPIO_VidSetPinDirection+0x1a0>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	7979      	ldrb	r1, [r7, #5]
 8000374:	79ba      	ldrb	r2, [r7, #6]
 8000376:	0092      	lsls	r2, r2, #2
 8000378:	fa01 f202 	lsl.w	r2, r1, r2
 800037c:	4611      	mov	r1, r2
 800037e:	4a35      	ldr	r2, [pc, #212]	; (8000454 <GPIO_VidSetPinDirection+0x1a0>)
 8000380:	430b      	orrs	r3, r1
 8000382:	6013      	str	r3, [r2, #0]
			break;
 8000384:	e05a      	b.n	800043c <GPIO_VidSetPinDirection+0x188>
			else if(Copy_u8Pin <=15 )
 8000386:	79bb      	ldrb	r3, [r7, #6]
 8000388:	2b0f      	cmp	r3, #15
 800038a:	d857      	bhi.n	800043c <GPIO_VidSetPinDirection+0x188>
				Copy_u8Pin = Copy_u8Pin - 8;
 800038c:	79bb      	ldrb	r3, [r7, #6]
 800038e:	3b08      	subs	r3, #8
 8000390:	71bb      	strb	r3, [r7, #6]
				GPIOB_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000392:	4b31      	ldr	r3, [pc, #196]	; (8000458 <GPIO_VidSetPinDirection+0x1a4>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	79ba      	ldrb	r2, [r7, #6]
 8000398:	0092      	lsls	r2, r2, #2
 800039a:	210f      	movs	r1, #15
 800039c:	fa01 f202 	lsl.w	r2, r1, r2
 80003a0:	43d2      	mvns	r2, r2
 80003a2:	4611      	mov	r1, r2
 80003a4:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <GPIO_VidSetPinDirection+0x1a4>)
 80003a6:	400b      	ands	r3, r1
 80003a8:	6013      	str	r3, [r2, #0]
				GPIOB_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80003aa:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <GPIO_VidSetPinDirection+0x1a4>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	7979      	ldrb	r1, [r7, #5]
 80003b0:	79ba      	ldrb	r2, [r7, #6]
 80003b2:	0092      	lsls	r2, r2, #2
 80003b4:	fa01 f202 	lsl.w	r2, r1, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	4a27      	ldr	r2, [pc, #156]	; (8000458 <GPIO_VidSetPinDirection+0x1a4>)
 80003bc:	430b      	orrs	r3, r1
 80003be:	6013      	str	r3, [r2, #0]
			break;
 80003c0:	e03c      	b.n	800043c <GPIO_VidSetPinDirection+0x188>
			if(Copy_u8Pin <= 7 )
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	2b07      	cmp	r3, #7
 80003c6:	d817      	bhi.n	80003f8 <GPIO_VidSetPinDirection+0x144>
				GPIOC_CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 80003c8:	4b24      	ldr	r3, [pc, #144]	; (800045c <GPIO_VidSetPinDirection+0x1a8>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	79ba      	ldrb	r2, [r7, #6]
 80003ce:	0092      	lsls	r2, r2, #2
 80003d0:	210f      	movs	r1, #15
 80003d2:	fa01 f202 	lsl.w	r2, r1, r2
 80003d6:	43d2      	mvns	r2, r2
 80003d8:	4611      	mov	r1, r2
 80003da:	4a20      	ldr	r2, [pc, #128]	; (800045c <GPIO_VidSetPinDirection+0x1a8>)
 80003dc:	400b      	ands	r3, r1
 80003de:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <GPIO_VidSetPinDirection+0x1a8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	7979      	ldrb	r1, [r7, #5]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a1a      	ldr	r2, [pc, #104]	; (800045c <GPIO_VidSetPinDirection+0x1a8>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	6013      	str	r3, [r2, #0]
			break;
 80003f6:	e023      	b.n	8000440 <GPIO_VidSetPinDirection+0x18c>
			else if(Copy_u8Pin <=15 )
 80003f8:	79bb      	ldrb	r3, [r7, #6]
 80003fa:	2b0f      	cmp	r3, #15
 80003fc:	d820      	bhi.n	8000440 <GPIO_VidSetPinDirection+0x18c>
				Copy_u8Pin = Copy_u8Pin - 8;
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	3b08      	subs	r3, #8
 8000402:	71bb      	strb	r3, [r7, #6]
				GPIOC_CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <GPIO_VidSetPinDirection+0x1ac>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	79ba      	ldrb	r2, [r7, #6]
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	210f      	movs	r1, #15
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	43d2      	mvns	r2, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4a12      	ldr	r2, [pc, #72]	; (8000460 <GPIO_VidSetPinDirection+0x1ac>)
 8000418:	400b      	ands	r3, r1
 800041a:	6013      	str	r3, [r2, #0]
				GPIOC_CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <GPIO_VidSetPinDirection+0x1ac>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	7979      	ldrb	r1, [r7, #5]
 8000422:	79ba      	ldrb	r2, [r7, #6]
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <GPIO_VidSetPinDirection+0x1ac>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6013      	str	r3, [r2, #0]
			break;
 8000432:	e005      	b.n	8000440 <GPIO_VidSetPinDirection+0x18c>
		default :break;
 8000434:	bf00      	nop
 8000436:	e004      	b.n	8000442 <GPIO_VidSetPinDirection+0x18e>
			break;
 8000438:	bf00      	nop
 800043a:	e002      	b.n	8000442 <GPIO_VidSetPinDirection+0x18e>
			break;
 800043c:	bf00      	nop
 800043e:	e000      	b.n	8000442 <GPIO_VidSetPinDirection+0x18e>
			break;
 8000440:	bf00      	nop
	}
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40010800 	.word	0x40010800
 8000450:	40010804 	.word	0x40010804
 8000454:	40010c00 	.word	0x40010c00
 8000458:	40010c04 	.word	0x40010c04
 800045c:	40011000 	.word	0x40011000
 8000460:	40011004 	.word	0x40011004

08000464 <Parser_u8AsciToHex>:

u16 u16Data[100] = {0};
u32 u32Address= 0x08000000;

u8 Parser_u8AsciToHex(u8 Copy_u8Asci)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Result;
	/* check received data */
	/* if it is number from 0 to 9 */
	/* or it is character from A TO F */
	/* to change it from ASCI to Decimal */
	if ( (Copy_u8Asci >= 48) && (Copy_u8Asci <= 57) )
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b2f      	cmp	r3, #47	; 0x2f
 8000472:	d906      	bls.n	8000482 <Parser_u8AsciToHex+0x1e>
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	2b39      	cmp	r3, #57	; 0x39
 8000478:	d803      	bhi.n	8000482 <Parser_u8AsciToHex+0x1e>
	{
		Local_u8Result = Copy_u8Asci - 48;
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	3b30      	subs	r3, #48	; 0x30
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e002      	b.n	8000488 <Parser_u8AsciToHex+0x24>
	}
	else
	{
		Local_u8Result = Copy_u8Asci - 55;
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	3b37      	subs	r3, #55	; 0x37
 8000486:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8Result ;
 8000488:	7bfb      	ldrb	r3, [r7, #15]
}
 800048a:	4618      	mov	r0, r3
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <Pareser_voidParseData>:

void Pareser_voidParseData(u8* Copy_u8BufData)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	u8 Local_u8DigitLow,Local_u8DigitHigh,Local_u8CC,Local_u8CounterData;
	u8 Local_u8DataDigit0,Local_u8DataDigit1,Local_u8DataDigit2,Local_u8DataDigit3;
	u8 Local_u8DataCounter = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	75bb      	strb	r3, [r7, #22]

	/* Get Character Count */
	Local_u8DigitHigh = Parser_u8AsciToHex (Copy_u8BufData[1]);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3301      	adds	r3, #1
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ffdc 	bl	8000464 <Parser_u8AsciToHex>
 80004ac:	4603      	mov	r3, r0
 80004ae:	757b      	strb	r3, [r7, #21]
	Local_u8DigitLow  = Parser_u8AsciToHex (Copy_u8BufData[2]);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3302      	adds	r3, #2
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ffd4 	bl	8000464 <Parser_u8AsciToHex>
 80004bc:	4603      	mov	r3, r0
 80004be:	753b      	strb	r3, [r7, #20]
	Local_u8CC        = (Local_u8DigitHigh<<4) | Local_u8DigitLow ;
 80004c0:	7d7b      	ldrb	r3, [r7, #21]
 80004c2:	011b      	lsls	r3, r3, #4
 80004c4:	b25a      	sxtb	r2, r3
 80004c6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	74fb      	strb	r3, [r7, #19]

	/* Get Address */
	Local_u8DataDigit0 = Parser_u8AsciToHex (Copy_u8BufData[3]);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3303      	adds	r3, #3
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ffc4 	bl	8000464 <Parser_u8AsciToHex>
 80004dc:	4603      	mov	r3, r0
 80004de:	74bb      	strb	r3, [r7, #18]
	Local_u8DataDigit1 = Parser_u8AsciToHex (Copy_u8BufData[4]);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3304      	adds	r3, #4
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ffbc 	bl	8000464 <Parser_u8AsciToHex>
 80004ec:	4603      	mov	r3, r0
 80004ee:	747b      	strb	r3, [r7, #17]
	Local_u8DataDigit2 = Parser_u8AsciToHex (Copy_u8BufData[5]);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3305      	adds	r3, #5
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffb4 	bl	8000464 <Parser_u8AsciToHex>
 80004fc:	4603      	mov	r3, r0
 80004fe:	743b      	strb	r3, [r7, #16]
	Local_u8DataDigit3 = Parser_u8AsciToHex (Copy_u8BufData[6]);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3306      	adds	r3, #6
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ffac 	bl	8000464 <Parser_u8AsciToHex>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

	/* Clear Low Part of Address */
	u32Address = u32Address & 0xFFFF0000;
 8000510:	4b39      	ldr	r3, [pc, #228]	; (80005f8 <Pareser_voidParseData+0x164>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	041b      	lsls	r3, r3, #16
 8000518:	4a37      	ldr	r2, [pc, #220]	; (80005f8 <Pareser_voidParseData+0x164>)
 800051a:	6013      	str	r3, [r2, #0]
	u32Address = u32Address | (Local_u8DataDigit3) | (Local_u8DataDigit2 << 4) | (Local_u8DataDigit1 << 8) | (Local_u8DataDigit0<<12);
 800051c:	7bfa      	ldrb	r2, [r7, #15]
 800051e:	4b36      	ldr	r3, [pc, #216]	; (80005f8 <Pareser_voidParseData+0x164>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4313      	orrs	r3, r2
 8000524:	7c3a      	ldrb	r2, [r7, #16]
 8000526:	0112      	lsls	r2, r2, #4
 8000528:	4313      	orrs	r3, r2
 800052a:	7c7a      	ldrb	r2, [r7, #17]
 800052c:	0212      	lsls	r2, r2, #8
 800052e:	4313      	orrs	r3, r2
 8000530:	7cba      	ldrb	r2, [r7, #18]
 8000532:	0312      	lsls	r2, r2, #12
 8000534:	4313      	orrs	r3, r2
 8000536:	4a30      	ldr	r2, [pc, #192]	; (80005f8 <Pareser_voidParseData+0x164>)
 8000538:	6013      	str	r3, [r2, #0]

	for (Local_u8CounterData = 0 ; Local_u8CounterData < Local_u8CC/2; Local_u8CounterData++)
 800053a:	2300      	movs	r3, #0
 800053c:	75fb      	strb	r3, [r7, #23]
 800053e:	e047      	b.n	80005d0 <Pareser_voidParseData+0x13c>
	{
		Local_u8DataDigit0 = Parser_u8AsciToHex (Copy_u8BufData[4*Local_u8CounterData+9 ]);
 8000540:	7dfb      	ldrb	r3, [r7, #23]
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	3309      	adds	r3, #9
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ff89 	bl	8000464 <Parser_u8AsciToHex>
 8000552:	4603      	mov	r3, r0
 8000554:	74bb      	strb	r3, [r7, #18]
		Local_u8DataDigit1 = Parser_u8AsciToHex (Copy_u8BufData[4*Local_u8CounterData+10]);
 8000556:	7dfb      	ldrb	r3, [r7, #23]
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	330a      	adds	r3, #10
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4413      	add	r3, r2
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff7e 	bl	8000464 <Parser_u8AsciToHex>
 8000568:	4603      	mov	r3, r0
 800056a:	747b      	strb	r3, [r7, #17]
		Local_u8DataDigit2 = Parser_u8AsciToHex (Copy_u8BufData[4*Local_u8CounterData+11]);
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	330b      	adds	r3, #11
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ff73 	bl	8000464 <Parser_u8AsciToHex>
 800057e:	4603      	mov	r3, r0
 8000580:	743b      	strb	r3, [r7, #16]
		Local_u8DataDigit3 = Parser_u8AsciToHex (Copy_u8BufData[4*Local_u8CounterData+12]);
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	330c      	adds	r3, #12
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	4413      	add	r3, r2
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff68 	bl	8000464 <Parser_u8AsciToHex>
 8000594:	4603      	mov	r3, r0
 8000596:	73fb      	strb	r3, [r7, #15]

		u16Data[Local_u8DataCounter] = (Local_u8DataDigit3 << 8) | (Local_u8DataDigit2 << 12) | (Local_u8DataDigit1) | (Local_u8DataDigit0<<4);
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	b21a      	sxth	r2, r3
 800059e:	7c3b      	ldrb	r3, [r7, #16]
 80005a0:	031b      	lsls	r3, r3, #12
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	4313      	orrs	r3, r2
 80005a6:	b21a      	sxth	r2, r3
 80005a8:	7c7b      	ldrb	r3, [r7, #17]
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	7cbb      	ldrb	r3, [r7, #18]
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b21a      	sxth	r2, r3
 80005ba:	7dbb      	ldrb	r3, [r7, #22]
 80005bc:	b291      	uxth	r1, r2
 80005be:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <Pareser_voidParseData+0x168>)
 80005c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Local_u8DataCounter++;
 80005c4:	7dbb      	ldrb	r3, [r7, #22]
 80005c6:	3301      	adds	r3, #1
 80005c8:	75bb      	strb	r3, [r7, #22]
	for (Local_u8CounterData = 0 ; Local_u8CounterData < Local_u8CC/2; Local_u8CounterData++)
 80005ca:	7dfb      	ldrb	r3, [r7, #23]
 80005cc:	3301      	adds	r3, #1
 80005ce:	75fb      	strb	r3, [r7, #23]
 80005d0:	7cfb      	ldrb	r3, [r7, #19]
 80005d2:	085b      	lsrs	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	7dfa      	ldrb	r2, [r7, #23]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d3b1      	bcc.n	8000540 <Pareser_voidParseData+0xac>
	}

	FPEC_voidFlashWrite(u32Address , u16Data , Local_u8CC/2 );
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <Pareser_voidParseData+0x164>)
 80005de:	6818      	ldr	r0, [r3, #0]
 80005e0:	7cfb      	ldrb	r3, [r7, #19]
 80005e2:	085b      	lsrs	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	4904      	ldr	r1, [pc, #16]	; (80005fc <Pareser_voidParseData+0x168>)
 80005ea:	f7ff fe0f 	bl	800020c <FPEC_voidFlashWrite>
}
 80005ee:	bf00      	nop
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000038 	.word	0x20000038

08000600 <Parser_voidParseUpperAddress>:

void Parser_voidParseUpperAddress(u8* Copy_u8BufferData)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
//	Local_u8DataDigit2 = Parser_u8AsciToHex (Copy_u8BufferData[5]);
//	Local_u8DataDigit3 = Parser_u8AsciToHex (Copy_u8BufferData[6]);
//	/* Clear Low Part of Address */
//	u32Address = u32Address & (u32)0x0000FFFF;
//	u32Address = u32Address | (u32)((u32)(Local_u8DataDigit3 << 28) | (u32)(Local_u8DataDigit2 << 24) | (u32)(Local_u8DataDigit1 << 20) | (u32)(Local_u8DataDigit0 << 16));
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <Parser_voidParseRecord>:

void Parser_voidParseRecord(u8* Copy_u8BufferData)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	switch (Copy_u8BufferData[8])
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3308      	adds	r3, #8
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b30      	cmp	r3, #48	; 0x30
 8000622:	d002      	beq.n	800062a <Parser_voidParseRecord+0x18>
 8000624:	2b34      	cmp	r3, #52	; 0x34
 8000626:	d004      	beq.n	8000632 <Parser_voidParseRecord+0x20>
	{
	case '0': Pareser_voidParseData(Copy_u8BufferData); break;
	case '4': Parser_voidParseUpperAddress(Copy_u8BufferData); break;
	}
}
 8000628:	e007      	b.n	800063a <Parser_voidParseRecord+0x28>
	case '0': Pareser_voidParseData(Copy_u8BufferData); break;
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff ff32 	bl	8000494 <Pareser_voidParseData>
 8000630:	e003      	b.n	800063a <Parser_voidParseRecord+0x28>
	case '4': Parser_voidParseUpperAddress(Copy_u8BufferData); break;
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ffe4 	bl	8000600 <Parser_voidParseUpperAddress>
 8000638:	bf00      	nop
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void RCC_voidInitSysClock(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
		RCC_CFGR = 0x00000001;
	#elif   RCC_CLOCK_TYPE == RCC_HSE_RC
		RCC_CR   = 0x00050000; /* Enable HSE with bypass */
		RCC_CFGR = 0x00000001;
	#elif   RCC_CLOCK_TYPE == RCC_HSI
		RCC_CR   = 0x00000081; /* Enable HSI + Trimming = 0 */
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <RCC_voidInitSysClock+0x18>)
 800064a:	2281      	movs	r2, #129	; 0x81
 800064c:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0x00000000;
 800064e:	4b04      	ldr	r3, [pc, #16]	; (8000660 <RCC_voidInitSysClock+0x1c>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
		
		#endif
	#else
		#error("You chosed Wrong Clock type")
	#endif
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000
 8000660:	40021004 	.word	0x40021004

08000664 <RCC_voidEnableClock>:

void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	2b1f      	cmp	r3, #31
 8000678:	d82a      	bhi.n	80006d0 <RCC_voidEnableClock+0x6c>
	{
		switch (Copy_u8BusId)
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d01c      	beq.n	80006ba <RCC_voidEnableClock+0x56>
 8000680:	2b02      	cmp	r3, #2
 8000682:	dc25      	bgt.n	80006d0 <RCC_voidEnableClock+0x6c>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <RCC_voidEnableClock+0x2a>
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00b      	beq.n	80006a4 <RCC_voidEnableClock+0x40>
	}
	else
	{
		/* Return Error */
	}
}
 800068c:	e020      	b.n	80006d0 <RCC_voidEnableClock+0x6c>
			case RCC_AHB  : SET_BIT(RCC_AHBENR  ,Copy_u8PerId);   break;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <RCC_voidEnableClock+0x78>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	79ba      	ldrb	r2, [r7, #6]
 8000694:	2101      	movs	r1, #1
 8000696:	fa01 f202 	lsl.w	r2, r1, r2
 800069a:	4611      	mov	r1, r2
 800069c:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <RCC_voidEnableClock+0x78>)
 800069e:	430b      	orrs	r3, r1
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	e015      	b.n	80006d0 <RCC_voidEnableClock+0x6c>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR ,Copy_u8PerId);   break;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <RCC_voidEnableClock+0x7c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	79ba      	ldrb	r2, [r7, #6]
 80006aa:	2101      	movs	r1, #1
 80006ac:	fa01 f202 	lsl.w	r2, r1, r2
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <RCC_voidEnableClock+0x7c>)
 80006b4:	430b      	orrs	r3, r1
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	e00a      	b.n	80006d0 <RCC_voidEnableClock+0x6c>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR ,Copy_u8PerId);   break;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <RCC_voidEnableClock+0x80>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	2101      	movs	r1, #1
 80006c2:	fa01 f202 	lsl.w	r2, r1, r2
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <RCC_voidEnableClock+0x80>)
 80006ca:	430b      	orrs	r3, r1
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	bf00      	nop
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40021014 	.word	0x40021014
 80006e0:	4002101c 	.word	0x4002101c
 80006e4:	40021018 	.word	0x40021018

080006e8 <SYSTICK_voidInit>:

/* Define Variable for interval mode */
static u8 u8ModeOfInterval;

void SYSTICK_voidInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
#if SYSTICK_CLK_SRC == SYSTICK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	SYSTICK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	SYSTICK -> CTRL = 0;
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <SYSTICK_voidInit+0x14>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
#endif
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000e010 	.word	0xe000e010

08000700 <SYSTICK_voidSetIntervalSingle>:
	SYSTICK -> LOAD = 0;
	SYSTICK -> VAL  = 0;
}

void SYSTICK_voidSetIntervalSingle  ( u32 Copy_u32Ticks, void (*Copy_ptr)(void) )
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	/* Stop Timer */
	CLR_BIT(SYSTICK->CTRL, 0);
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SYSTICK_voidSetIntervalSingle+0x58>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <SYSTICK_voidSetIntervalSingle+0x58>)
 8000710:	f023 0301 	bic.w	r3, r3, #1
 8000714:	6013      	str	r3, [r2, #0]
	SYSTICK -> LOAD = 0;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <SYSTICK_voidSetIntervalSingle+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
	SYSTICK -> VAL  = 0;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SYSTICK_voidSetIntervalSingle+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
	/* Load ticks to load register */
	SYSTICK -> LOAD = Copy_u32Ticks;
 8000722:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <SYSTICK_voidSetIntervalSingle+0x58>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6053      	str	r3, [r2, #4]
	/* Start Timer */
	SET_BIT(SYSTICK->CTRL, 0);
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <SYSTICK_voidSetIntervalSingle+0x58>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <SYSTICK_voidSetIntervalSingle+0x58>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]
	/* Save CallBack */
	SYSTICK_CallBack = Copy_ptr;
 8000734:	4a09      	ldr	r2, [pc, #36]	; (800075c <SYSTICK_voidSetIntervalSingle+0x5c>)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	6013      	str	r3, [r2, #0]
	/* Set Mode to Single */
	u8ModeOfInterval = SYSTICK_SINGLE_INTERVAL;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <SYSTICK_voidSetIntervalSingle+0x60>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
	/* Enable STK Interrupt */
	SET_BIT(SYSTICK->CTRL, 1);
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SYSTICK_voidSetIntervalSingle+0x58>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <SYSTICK_voidSetIntervalSingle+0x58>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010
 800075c:	20000100 	.word	0x20000100
 8000760:	20000104 	.word	0x20000104

08000764 <SYSTICK_voidStopInterval>:
	/* Enable STK Interrupt */
	SET_BIT(SYSTICK->CTRL, 1);
}

void SYSTICK_voidStopInterval(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
	/* Disable STK Interrupt */
	CLR_BIT(SYSTICK->CTRL, 1);
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <SYSTICK_voidStopInterval+0x30>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a09      	ldr	r2, [pc, #36]	; (8000794 <SYSTICK_voidStopInterval+0x30>)
 800076e:	f023 0302 	bic.w	r3, r3, #2
 8000772:	6013      	str	r3, [r2, #0]
	/* Stop Timer */
	SET_BIT(SYSTICK->CTRL, 0);
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <SYSTICK_voidStopInterval+0x30>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <SYSTICK_voidStopInterval+0x30>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	6013      	str	r3, [r2, #0]
	SYSTICK -> LOAD = 0;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SYSTICK_voidStopInterval+0x30>)
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
	SYSTICK -> VAL  = 0;
 8000786:	4b03      	ldr	r3, [pc, #12]	; (8000794 <SYSTICK_voidStopInterval+0x30>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	e000e010 	.word	0xe000e010

08000798 <UART1_voidInit>:
#include "UART_config.h"
#include "UART_interface.h"
#include "UART_private.h"

void UART1_voidInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	/*	baud rate = 9600		*/
	UART1 -> BRR = 0x341;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <UART1_voidInit+0x40>)
 800079e:	f240 3241 	movw	r2, #833	; 0x341
 80007a2:	609a      	str	r2, [r3, #8]
	SET_BIT((UART1-> CR[0]), 3);			/* Enabling Transmitter */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <UART1_voidInit+0x40>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <UART1_voidInit+0x40>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	60d3      	str	r3, [r2, #12]
	SET_BIT((UART1-> CR[0]), 2);			/* Enabling Receiver */
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <UART1_voidInit+0x40>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <UART1_voidInit+0x40>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	60d3      	str	r3, [r2, #12]
	SET_BIT((UART1-> CR[0]), 13);			/* Enabling USART */
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <UART1_voidInit+0x40>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <UART1_voidInit+0x40>)
 80007c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007c6:	60d3      	str	r3, [r2, #12]
	UART1 -> SR = 0;						/* Clearing status register */
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <UART1_voidInit+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40013800 	.word	0x40013800

080007dc <UART1_voidTransmit>:

void UART1_voidTransmit(u8 copy_u8Data[])
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	u8 Local_u8DataCounter = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
	while(copy_u8Data[Local_u8DataCounter] != '\0')
 80007e8:	e00f      	b.n	800080a <UART1_voidTransmit+0x2e>
	{
		/* put data in sender buffer */
		UART1 -> DR = copy_u8Data[Local_u8DataCounter];
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <UART1_voidTransmit+0x48>)
 80007f4:	605a      	str	r2, [r3, #4]
		/* wait till complete send to be set */
		while((GET_BIT((UART1 -> SR), 6)) == 0);
 80007f6:	bf00      	nop
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <UART1_voidTransmit+0x48>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f9      	beq.n	80007f8 <UART1_voidTransmit+0x1c>
		/* take next element of data */
		Local_u8DataCounter++;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	3301      	adds	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
	while(copy_u8Data[Local_u8DataCounter] != '\0')
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1e9      	bne.n	80007ea <UART1_voidTransmit+0xe>
	}
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40013800 	.word	0x40013800

08000828 <UART1_u8Receive>:
	/* wait till complete send to be set */
	while((GET_BIT((UART1 -> SR), 6)) == 0);
}

u8 UART1_u8Receive(u8* Copy_u8Data)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	u8 Local_u8Result = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
	/* ask if there is a received data take it and return 1 */
	/* or return 0 if there is no data reveived */
	if ( (GET_BIT((UART1 -> SR), 5)) == 1 )
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <UART1_u8Receive+0x38>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	095b      	lsrs	r3, r3, #5
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	2b01      	cmp	r3, #1
 8000840:	d105      	bne.n	800084e <UART1_u8Receive+0x26>
	{
		*Copy_u8Data = UART1 -> DR;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <UART1_u8Receive+0x38>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e001      	b.n	8000852 <UART1_u8Receive+0x2a>
	}
	else
	{
		Local_u8Result = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]
	}
	return (Local_u8Result);
 8000852:	7bfb      	ldrb	r3, [r7, #15]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40013800 	.word	0x40013800

08000864 <JumpApplicationFunction>:
volatile u8  u8WriteRequest       = 1;
typedef void (*Function_t)(void);
Function_t AddrressCall = 0;

void JumpApplicationFunction(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	/* definition of scb_vtor Register to make startup code initialized vector table of Application */
	#define SCB_VTOR   *((volatile u32*)0xE000ED08)
	/* Store the first Address of Flash to be the Address of Vector Table */
	SCB_VTOR = 0x08001000;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <JumpApplicationFunction+0x1c>)
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <JumpApplicationFunction+0x20>)
 800086c:	601a      	str	r2, [r3, #0]
	/* Initialize a pointer to function with address of startup code */
	/* Jump to the next Address to Start Startup Code */
	AddrressCall = *(Function_t*)(0x08001004);
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <JumpApplicationFunction+0x24>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a06      	ldr	r2, [pc, #24]	; (800088c <JumpApplicationFunction+0x28>)
 8000874:	6013      	str	r3, [r2, #0]
	AddrressCall();
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <JumpApplicationFunction+0x28>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4798      	blx	r3
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	e000ed08 	.word	0xe000ed08
 8000884:	08001000 	.word	0x08001000
 8000888:	08001004 	.word	0x08001004
 800088c:	20000198 	.word	0x20000198

08000890 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef RxHeader ;
uint8_t RxData[8];

/////////////////////////////////////////////////////////////////////////////////////////
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800089c:	2100      	movs	r1, #0
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fdd1 	bl	8001446 <HAL_CAN_GetRxMessage>
	if(RxHeader.StdId == 0x222)
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f240 2222 	movw	r2, #546	; 0x222
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d104      	bne.n	80008ba <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b4:	2002      	movs	r0, #2
 80008b6:	f001 fbd9 	bl	800206c <HAL_GPIO_TogglePin>
	}
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000210 	.word	0x20000210
 80008c8:	200001f4 	.word	0x200001f4

080008cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	u8 Local_u8ReceiverStatus;
		/* Initialize RCC peripheral --> HSI Clock */
		RCC_voidInitSysClock();
 80008d2:	f7ff feb7 	bl	8000644 <RCC_voidInitSysClock>
		RCC_voidEnableClock(RCC_APB2,RCC_UART1); /* Initialize Clock --> USART1 peripheral */
 80008d6:	210e      	movs	r1, #14
 80008d8:	2002      	movs	r0, #2
 80008da:	f7ff fec3 	bl	8000664 <RCC_voidEnableClock>
		RCC_voidEnableClock(RCC_APB2,RCC_GPIOA);  /* Initialize Clock --> PortA  peripheral */
 80008de:	2102      	movs	r1, #2
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff febf 	bl	8000664 <RCC_voidEnableClock>
		RCC_voidEnableClock(RCC_AHB,RCC_FPEC);   /* Initialize Clock --> FPEC   peripheral */
 80008e6:	2104      	movs	r1, #4
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff febb 	bl	8000664 <RCC_voidEnableClock>
		/* Configure  pin 9  port A To be a TX pin of UART peripheral  */
		GPIO_VidSetPinDirection(GPIOA,PIN9,OUTPUT_SPEED_2MHZ_AFPP);
 80008ee:	220a      	movs	r2, #10
 80008f0:	2109      	movs	r1, #9
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff fcde 	bl	80002b4 <GPIO_VidSetPinDirection>
		/* Configure  pin 10  port A To be a RX pin of UART peripheral */
		GPIO_VidSetPinDirection(GPIOA,PIN10,INPUT_FLOATING);
 80008f8:	2204      	movs	r2, #4
 80008fa:	210a      	movs	r1, #10
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fcd9 	bl	80002b4 <GPIO_VidSetPinDirection>
		/* Initialize UART peripheral "Enable TX & & RX & peripheral " */
		UART1_voidInit();
 8000902:	f7ff ff49 	bl	8000798 <UART1_voidInit>
		/* Initialize Systick peripheral to be run on 1MHZ Clock */
		SYSTICK_voidInit();
 8000906:	f7ff feef 	bl	80006e8 <SYSTICK_voidInit>
		/* Define an Interval 15 second if this Interval end the CPU will jump to Application Function */
		SYSTICK_voidSetIntervalSingle(15000000,JumpApplicationFunction);
 800090a:	493a      	ldr	r1, [pc, #232]	; (80009f4 <main+0x128>)
 800090c:	483a      	ldr	r0, [pc, #232]	; (80009f8 <main+0x12c>)
 800090e:	f7ff fef7 	bl	8000700 <SYSTICK_voidSetIntervalSingle>
		/* Send Acknowledge to the Master That indicate we are ready to receive the new update of Application Code */
		//UART1_voidTransmitASCI('r');

		while(u8TimeOutFlag == 0)
 8000912:	e037      	b.n	8000984 <main+0xb8>
		{
			/* receive the data which send from master and save it in receiver buffer */
			/* if there is data received data return 1 */
			/* if there is no data received data return 0 */
			Local_u8ReceiverStatus = UART1_u8Receive( &(u8ReceiverBuffer[u8ReceiverCounter]) );
 8000914:	4b39      	ldr	r3, [pc, #228]	; (80009fc <main+0x130>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	461a      	mov	r2, r3
 800091c:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <main+0x134>)
 800091e:	4413      	add	r3, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff81 	bl	8000828 <UART1_u8Receive>
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
			if (Local_u8ReceiverStatus == 1)
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d129      	bne.n	8000984 <main+0xb8>
			{
				/* Stop Timer to avoid interrupt of systick while receiving data from master */
				SYSTICK_voidStopInterval();
 8000930:	f7ff ff18 	bl	8000764 <SYSTICK_voidStopInterval>
				/*receive data and check it if it equal '\n' that indicate we receive a fully Record */
				/* if it not equal '\n' that indicate we need to increment counter of Buffer receiver to receive the next byte of record */
				if(u8ReceiverBuffer[u8ReceiverCounter] == '\n')
 8000934:	4b31      	ldr	r3, [pc, #196]	; (80009fc <main+0x130>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <main+0x134>)
 800093e:	5c9b      	ldrb	r3, [r3, r2]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b0a      	cmp	r3, #10
 8000944:	d113      	bne.n	800096e <main+0xa2>
				{
					/* After receive first record and Before Flashing it on Flash memory */
					/* we need to Erase Application Area to be able to write on flash memory*/
					/* write Request change only when receive first record */
					if (u8WriteRequest == 1)
 8000946:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <main+0x138>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b01      	cmp	r3, #1
 800094e:	d104      	bne.n	800095a <main+0x8e>
					{
						FPEC_voidEraseAppArea();
 8000950:	f7ff fbfc 	bl	800014c <FPEC_voidEraseAppArea>
						u8WriteRequest = 0;
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <main+0x138>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
					}
					/* Parse the record which is saved in Receiver Buffer to be Suitable to Flashing on Flash memory */
					Parser_voidParseRecord(u8ReceiverBuffer);
 800095a:	4829      	ldr	r0, [pc, #164]	; (8000a00 <main+0x134>)
 800095c:	f7ff fe59 	bl	8000612 <Parser_voidParseRecord>
					/* Send an acknowledge to the master that indicate we receive fully record and finish flashing it */
					//UART1_voidTransmitASCI('o');
					UART1_voidTransmit("ok");
 8000960:	4829      	ldr	r0, [pc, #164]	; (8000a08 <main+0x13c>)
 8000962:	f7ff ff3b 	bl	80007dc <UART1_voidTransmit>
					/* reset receiver counter to receive the next record */
					u8ReceiverCounter = 0;
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <main+0x130>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	e006      	b.n	800097c <main+0xb0>
				}
				else
				{
					u8ReceiverCounter ++ ;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <main+0x130>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	3301      	adds	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <main+0x130>)
 800097a:	701a      	strb	r2, [r3, #0]
				}
				/* Define an Interval 15 second if this Interval end the CPU will jump to Application Function */
				SYSTICK_voidSetIntervalSingle(15000000,JumpApplicationFunction);
 800097c:	491d      	ldr	r1, [pc, #116]	; (80009f4 <main+0x128>)
 800097e:	481e      	ldr	r0, [pc, #120]	; (80009f8 <main+0x12c>)
 8000980:	f7ff febe 	bl	8000700 <SYSTICK_voidSetIntervalSingle>
		while(u8TimeOutFlag == 0)
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <main+0x140>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0c2      	beq.n	8000914 <main+0x48>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800098e:	f000 fa21 	bl	8000dd4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000992:	f000 f847 	bl	8000a24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000996:	f000 f8d1 	bl	8000b3c <MX_GPIO_Init>
	MX_CAN_Init();
 800099a:	f000 f87d 	bl	8000a98 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */

	HAL_CAN_Start(&hcan);
 800099e:	481c      	ldr	r0, [pc, #112]	; (8000a10 <main+0x144>)
 80009a0:	f000 fc3e 	bl	8001220 <HAL_CAN_Start>

    ////////////////////////////////////////////////////////////////////////////////////////
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // active Rx Interrupt
 80009a4:	2102      	movs	r1, #2
 80009a6:	481a      	ldr	r0, [pc, #104]	; (8000a10 <main+0x144>)
 80009a8:	f000 fe6e 	bl	8001688 <HAL_CAN_ActivateNotification>
    ////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////
	TxHeader[0].StdId = 0x111 ;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <main+0x148>)
 80009ae:	f240 1211 	movw	r2, #273	; 0x111
 80009b2:	601a      	str	r2, [r3, #0]
	TxHeader[0].DLC   = 8     ;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <main+0x148>)
 80009b6:	2208      	movs	r2, #8
 80009b8:	611a      	str	r2, [r3, #16]
	TxHeader[0].ExtId = 0     ;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <main+0x148>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
	TxHeader[0].RTR   = CAN_RTR_DATA ;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <main+0x148>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
	TxHeader[0].IDE   = CAN_ID_STD   ;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <main+0x148>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
	TxHeader[0].TransmitGlobalTime = DISABLE ;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <main+0x148>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	751a      	strb	r2, [r3, #20]

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		switch(time_ms)
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <main+0x14c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009da:	d1fa      	bne.n	80009d2 <main+0x106>
		{

		  case 1000 :
			HAL_CAN_AddTxMessage(&hcan, &TxHeader[0], TxData, &TxMailBox[0]);
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <main+0x150>)
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <main+0x154>)
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <main+0x148>)
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <main+0x144>)
 80009e4:	f000 fc60 	bl	80012a8 <HAL_CAN_AddTxMessage>
			time_ms = 0 ;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <main+0x14c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
			 break;
 80009ee:	bf00      	nop
		switch(time_ms)
 80009f0:	e7ef      	b.n	80009d2 <main+0x106>
 80009f2:	bf00      	nop
 80009f4:	08000865 	.word	0x08000865
 80009f8:	00e4e1c0 	.word	0x00e4e1c0
 80009fc:	20000194 	.word	0x20000194
 8000a00:	20000130 	.word	0x20000130
 8000a04:	20000004 	.word	0x20000004
 8000a08:	080028cc 	.word	0x080028cc
 8000a0c:	20000195 	.word	0x20000195
 8000a10:	20000108 	.word	0x20000108
 8000a14:	200001a0 	.word	0x200001a0
 8000a18:	2000019c 	.word	0x2000019c
 8000a1c:	200001e8 	.word	0x200001e8
 8000a20:	20000008 	.word	0x20000008

08000a24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b090      	sub	sp, #64	; 0x40
 8000a28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	2228      	movs	r2, #40	; 0x28
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 ff12 	bl	800285c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fb21 	bl	80020a0 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x44>
	{
		Error_Handler();
 8000a64:	f000 f8b2 	bl	8000bcc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fd8f 	bl	80025a4 <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x6c>
	{
		Error_Handler();
 8000a8c:	f000 f89e 	bl	8000bcc <Error_Handler>
	}
}
 8000a90:	bf00      	nop
 8000a92:	3740      	adds	r7, #64	; 0x40
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000aa0:	4a25      	ldr	r2, [pc, #148]	; (8000b38 <MX_CAN_Init+0xa0>)
 8000aa2:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4;
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000ab8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000abc:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ae8:	4812      	ldr	r0, [pc, #72]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000aea:	f000 f9d5 	bl	8000e98 <HAL_CAN_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_CAN_Init+0x60>
	{
		Error_Handler();
 8000af4:	f000 f86a 	bl	8000bcc <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CAN_FilterTypeDef Filter1Confg ;

	Filter1Confg.FilterActivation = CAN_FILTER_ENABLE ;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
	Filter1Confg.FilterBank = 0 ;    // select the FilterBank id you will use  0 to SlaveStartFilterBank
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
	Filter1Confg.FilterFIFOAssignment = CAN_FILTER_FIFO0  ;  // which FIFO this filter work on
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
	Filter1Confg.FilterIdHigh = 0x000 ;  // here is 16 bit but we will use only 11bit>>STD_ID  so value<5
 8000b04:	2300      	movs	r3, #0
 8000b06:	603b      	str	r3, [r7, #0]
	Filter1Confg.FilterIdLow  = 0x000 ;  // for ExtId , RTR and IDE  && check data sheet &&
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
	Filter1Confg.FilterMaskIdHigh = 0x000 ;  //16 bit but we will use only 11bit>>STD_ID  so value<5
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
	Filter1Confg.FilterMaskIdLow  = 0x000  ;  // for ExtId , RTR and IDE   check data sheet
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
	Filter1Confg.FilterMode = CAN_FILTERMODE_IDMASK ;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
	Filter1Confg.FilterScale = CAN_FILTERSCALE_32BIT ;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61fb      	str	r3, [r7, #28]
	Filter1Confg.SlaveStartFilterBank = 13 ;
 8000b1c:	230d      	movs	r3, #13
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &Filter1Confg);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <MX_CAN_Init+0x9c>)
 8000b26:	f000 fab2 	bl	800108e <HAL_CAN_ConfigFilter>
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////


	/* USER CODE END CAN_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000108 	.word	0x20000108
 8000b38:	40006400 	.word	0x40006400

08000b3c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_GPIO_Init+0x8c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_GPIO_Init+0x8c>)
 8000b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_GPIO_Init+0x8c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_GPIO_Init+0x8c>)
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <MX_GPIO_Init+0x8c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_GPIO_Init+0x8c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0320 	and.w	r3, r3, #32
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_GPIO_Init+0x8c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <MX_GPIO_Init+0x8c>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_GPIO_Init+0x8c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f001 fa4e 	bl	800203c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f001 f8bb 	bl	8001d34 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000

08000bcc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_MspInit+0x5c>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <HAL_MspInit+0x5c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6193      	str	r3, [r2, #24]
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_MspInit+0x60>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_MspInit+0x60>)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000

08000c3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a24      	ldr	r2, [pc, #144]	; (8000ce8 <HAL_CAN_MspInit+0xac>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d141      	bne.n	8000ce0 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <HAL_CAN_MspInit+0xb0>)
 8000c5e:	69db      	ldr	r3, [r3, #28]
 8000c60:	4a22      	ldr	r2, [pc, #136]	; (8000cec <HAL_CAN_MspInit+0xb0>)
 8000c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c66:	61d3      	str	r3, [r2, #28]
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_CAN_MspInit+0xb0>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_CAN_MspInit+0xb0>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <HAL_CAN_MspInit+0xb0>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <HAL_CAN_MspInit+0xb0>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <HAL_CAN_MspInit+0xb4>)
 8000ca2:	f001 f847 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <HAL_CAN_MspInit+0xb4>)
 8000cbc:	f001 f83a 	bl	8001d34 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2014      	movs	r0, #20
 8000cc6:	f000 fffe 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000cca:	2014      	movs	r0, #20
 8000ccc:	f001 f817 	bl	8001cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2015      	movs	r0, #21
 8000cd6:	f000 fff6 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000cda:	2015      	movs	r0, #21
 8000cdc:	f001 f80f 	bl	8001cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40006400 	.word	0x40006400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 f890 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

   time_ms++ ;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <SysTick_Handler+0x18>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3301      	adds	r3, #1
 8000d46:	4a02      	ldr	r2, [pc, #8]	; (8000d50 <SysTick_Handler+0x18>)
 8000d48:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000019c 	.word	0x2000019c

08000d54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d5a:	f000 fcba 	bl	80016d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000108 	.word	0x20000108

08000d68 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <CAN1_RX1_IRQHandler+0x10>)
 8000d6e:	f000 fcb0 	bl	80016d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000108 	.word	0x20000108

08000d7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff fff8 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d8e:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da4:	4c09      	ldr	r4, [pc, #36]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f001 fd5b 	bl	800286c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db6:	f7ff fd89 	bl	80008cc <main>
  bx lr
 8000dba:	4770      	bx	lr
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000dc4:	080028fc 	.word	0x080028fc
  ldr r2, =_sbss
 8000dc8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000dcc:	2000021c 	.word	0x2000021c

08000dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_2_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x28>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x28>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 ff63 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	200f      	movs	r0, #15
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fef2 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 ff7b 	bl	8001d1a <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 ff43 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000010 	.word	0x20000010
 8000e58:	20000018 	.word	0x20000018
 8000e5c:	20000014 	.word	0x20000014

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x20>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <HAL_IncTick+0x20>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000018 	.word	0x20000018
 8000e80:	20000218 	.word	0x20000218

08000e84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <HAL_GetTick+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	20000218 	.word	0x20000218

08000e98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e0ed      	b.n	8001086 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fec0 	bl	8000c3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ecc:	f7ff ffda 	bl	8000e84 <HAL_GetTick>
 8000ed0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ed2:	e012      	b.n	8000efa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ed4:	f7ff ffd6 	bl	8000e84 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b0a      	cmp	r3, #10
 8000ee0:	d90b      	bls.n	8000efa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0c5      	b.n	8001086 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0e5      	beq.n	8000ed4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0202 	bic.w	r2, r2, #2
 8000f16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f18:	f7ff ffb4 	bl	8000e84 <HAL_GetTick>
 8000f1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f1e:	e012      	b.n	8000f46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f20:	f7ff ffb0 	bl	8000e84 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d90b      	bls.n	8000f46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e09f      	b.n	8001086 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1e5      	bne.n	8000f20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7e1b      	ldrb	r3, [r3, #24]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d108      	bne.n	8000f6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e007      	b.n	8000f7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7e5b      	ldrb	r3, [r3, #25]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d108      	bne.n	8000f98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e007      	b.n	8000fa8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7e9b      	ldrb	r3, [r3, #26]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d108      	bne.n	8000fc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 0220 	orr.w	r2, r2, #32
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e007      	b.n	8000fd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0220 	bic.w	r2, r2, #32
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7edb      	ldrb	r3, [r3, #27]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d108      	bne.n	8000fec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0210 	bic.w	r2, r2, #16
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e007      	b.n	8000ffc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0210 	orr.w	r2, r2, #16
 8000ffa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7f1b      	ldrb	r3, [r3, #28]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d108      	bne.n	8001016 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0208 	orr.w	r2, r2, #8
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e007      	b.n	8001026 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0208 	bic.w	r2, r2, #8
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7f5b      	ldrb	r3, [r3, #29]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 0204 	orr.w	r2, r2, #4
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e007      	b.n	8001050 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0204 	bic.w	r2, r2, #4
 800104e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	ea42 0103 	orr.w	r1, r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800108e:	b480      	push	{r7}
 8001090:	b087      	sub	sp, #28
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010a6:	7cfb      	ldrb	r3, [r7, #19]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d003      	beq.n	80010b4 <HAL_CAN_ConfigFilter+0x26>
 80010ac:	7cfb      	ldrb	r3, [r7, #19]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	f040 80aa 	bne.w	8001208 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	2201      	movs	r2, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43db      	mvns	r3, r3
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d123      	bne.n	8001136 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	401a      	ands	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001110:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3248      	adds	r2, #72	; 0x48
 8001116:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800112a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800112c:	6979      	ldr	r1, [r7, #20]
 800112e:	3348      	adds	r3, #72	; 0x48
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d122      	bne.n	8001184 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800115e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3248      	adds	r2, #72	; 0x48
 8001164:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001178:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800117a:	6979      	ldr	r1, [r7, #20]
 800117c:	3348      	adds	r3, #72	; 0x48
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	440b      	add	r3, r1
 8001182:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d109      	bne.n	80011a0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800119e:	e007      	b.n	80011b0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d109      	bne.n	80011cc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011ca:	e007      	b.n	80011dc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	431a      	orrs	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d107      	bne.n	80011f4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011fa:	f023 0201 	bic.w	r2, r3, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	e006      	b.n	8001216 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
  }
}
 8001216:	4618      	mov	r0, r3
 8001218:	371c      	adds	r7, #28
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d12e      	bne.n	8001292 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2202      	movs	r2, #2
 8001238:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800124c:	f7ff fe1a 	bl	8000e84 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001252:	e012      	b.n	800127a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001254:	f7ff fe16 	bl	8000e84 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d90b      	bls.n	800127a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2205      	movs	r2, #5
 8001272:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e012      	b.n	80012a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e5      	bne.n	8001254 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e006      	b.n	80012a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
  }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012c6:	7ffb      	ldrb	r3, [r7, #31]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d003      	beq.n	80012d4 <HAL_CAN_AddTxMessage+0x2c>
 80012cc:	7ffb      	ldrb	r3, [r7, #31]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	f040 80ad 	bne.w	800142e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10a      	bne.n	80012f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d105      	bne.n	80012f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8095 	beq.w	800141e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	0e1b      	lsrs	r3, r3, #24
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012fe:	2201      	movs	r2, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10d      	bne.n	800132c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800131a:	68f9      	ldr	r1, [r7, #12]
 800131c:	6809      	ldr	r1, [r1, #0]
 800131e:	431a      	orrs	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3318      	adds	r3, #24
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	440b      	add	r3, r1
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e00f      	b.n	800134c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001336:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001340:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3318      	adds	r3, #24
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	440b      	add	r3, r1
 800134a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3318      	adds	r3, #24
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	440b      	add	r3, r1
 800135c:	3304      	adds	r3, #4
 800135e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	7d1b      	ldrb	r3, [r3, #20]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d111      	bne.n	800138c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3318      	adds	r3, #24
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	3304      	adds	r3, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	6811      	ldr	r1, [r2, #0]
 800137c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3318      	adds	r3, #24
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	440b      	add	r3, r1
 8001388:	3304      	adds	r3, #4
 800138a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3307      	adds	r3, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	061a      	lsls	r2, r3, #24
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3306      	adds	r3, #6
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3305      	adds	r3, #5
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	4313      	orrs	r3, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	3204      	adds	r2, #4
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	4610      	mov	r0, r2
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	6811      	ldr	r1, [r2, #0]
 80013b4:	ea43 0200 	orr.w	r2, r3, r0
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	440b      	add	r3, r1
 80013be:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80013c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3303      	adds	r3, #3
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	061a      	lsls	r2, r3, #24
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3302      	adds	r3, #2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	041b      	lsls	r3, r3, #16
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3301      	adds	r3, #1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4313      	orrs	r3, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	7812      	ldrb	r2, [r2, #0]
 80013e4:	4610      	mov	r0, r2
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	6811      	ldr	r1, [r2, #0]
 80013ea:	ea43 0200 	orr.w	r2, r3, r0
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	440b      	add	r3, r1
 80013f4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3318      	adds	r3, #24
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	6811      	ldr	r1, [r2, #0]
 800140c:	f043 0201 	orr.w	r2, r3, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3318      	adds	r3, #24
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	440b      	add	r3, r1
 8001418:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e00e      	b.n	800143c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e006      	b.n	800143c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
  }
}
 800143c:	4618      	mov	r0, r3
 800143e:	3724      	adds	r7, #36	; 0x24
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001446:	b480      	push	{r7}
 8001448:	b087      	sub	sp, #28
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d003      	beq.n	800146a <HAL_CAN_GetRxMessage+0x24>
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	2b02      	cmp	r3, #2
 8001466:	f040 8103 	bne.w	8001670 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10e      	bne.n	800148e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d116      	bne.n	80014ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0f7      	b.n	800167e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d107      	bne.n	80014ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0e8      	b.n	800167e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	331b      	adds	r3, #27
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0204 	and.w	r2, r3, #4
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	331b      	adds	r3, #27
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0d5b      	lsrs	r3, r3, #21
 80014da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	331b      	adds	r3, #27
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	4413      	add	r3, r2
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	08db      	lsrs	r3, r3, #3
 80014f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	331b      	adds	r3, #27
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4413      	add	r3, r2
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0202 	and.w	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	331b      	adds	r3, #27
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	4413      	add	r3, r2
 800151e:	3304      	adds	r3, #4
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2208      	movs	r2, #8
 800152e:	611a      	str	r2, [r3, #16]
 8001530:	e00b      	b.n	800154a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	331b      	adds	r3, #27
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4413      	add	r3, r2
 800153e:	3304      	adds	r3, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 020f 	and.w	r2, r3, #15
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	331b      	adds	r3, #27
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	3304      	adds	r3, #4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b2da      	uxtb	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	331b      	adds	r3, #27
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0c1b      	lsrs	r3, r3, #16
 8001574:	b29a      	uxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	4413      	add	r3, r2
 8001584:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	4413      	add	r3, r2
 800159a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0a1a      	lsrs	r2, r3, #8
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	0c1a      	lsrs	r2, r3, #16
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	3302      	adds	r3, #2
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0e1a      	lsrs	r2, r3, #24
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	3303      	adds	r3, #3
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3304      	adds	r3, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	4413      	add	r3, r2
 8001600:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	0a1a      	lsrs	r2, r3, #8
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	3305      	adds	r3, #5
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4413      	add	r3, r2
 800161a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0c1a      	lsrs	r2, r3, #16
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3306      	adds	r3, #6
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	4413      	add	r3, r2
 8001634:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	0e1a      	lsrs	r2, r3, #24
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3307      	adds	r3, #7
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d108      	bne.n	800165c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0220 	orr.w	r2, r2, #32
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	e007      	b.n	800166c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0220 	orr.w	r2, r2, #32
 800166a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	e006      	b.n	800167e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
  }
}
 800167e:	4618      	mov	r0, r3
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001698:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d002      	beq.n	80016a6 <HAL_CAN_ActivateNotification+0x1e>
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d109      	bne.n	80016ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6959      	ldr	r1, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e006      	b.n	80016c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
  }
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b08a      	sub	sp, #40	; 0x28
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d07c      	beq.n	8001812 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d023      	beq.n	800176a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2201      	movs	r2, #1
 8001728:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f983 	bl	8001a40 <HAL_CAN_TxMailbox0CompleteCallback>
 800173a:	e016      	b.n	800176a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
 800174e:	e00c      	b.n	800176a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d004      	beq.n	8001764 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	e002      	b.n	800176a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f986 	bl	8001a76 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d024      	beq.n	80017be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f962 	bl	8001a52 <HAL_CAN_TxMailbox1CompleteCallback>
 800178e:	e016      	b.n	80017be <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	e00c      	b.n	80017be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d004      	beq.n	80017b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
 80017b6:	e002      	b.n	80017be <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f965 	bl	8001a88 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d024      	beq.n	8001812 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f941 	bl	8001a64 <HAL_CAN_TxMailbox2CompleteCallback>
 80017e2:	e016      	b.n	8001812 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	e00c      	b.n	8001812 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d004      	beq.n	800180c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	e002      	b.n	8001812 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f944 	bl	8001a9a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00c      	beq.n	8001836 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2210      	movs	r2, #16
 8001834:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00b      	beq.n	8001858 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2208      	movs	r2, #8
 8001850:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f92a 	bl	8001aac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff f80d 	bl	8000890 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00c      	beq.n	800189a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001890:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2210      	movs	r2, #16
 8001898:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00b      	beq.n	80018bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2208      	movs	r2, #8
 80018b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f90a 	bl	8001ad0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f8f2 	bl	8001abe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00b      	beq.n	80018fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2210      	movs	r2, #16
 80018f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f8f3 	bl	8001ae2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2208      	movs	r2, #8
 8001916:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f8eb 	bl	8001af4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d07b      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d072      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800198c:	2b00      	cmp	r3, #0
 800198e:	d043      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001996:	2b00      	cmp	r3, #0
 8001998:	d03e      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019a0:	2b60      	cmp	r3, #96	; 0x60
 80019a2:	d02b      	beq.n	80019fc <HAL_CAN_IRQHandler+0x32a>
 80019a4:	2b60      	cmp	r3, #96	; 0x60
 80019a6:	d82e      	bhi.n	8001a06 <HAL_CAN_IRQHandler+0x334>
 80019a8:	2b50      	cmp	r3, #80	; 0x50
 80019aa:	d022      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x320>
 80019ac:	2b50      	cmp	r3, #80	; 0x50
 80019ae:	d82a      	bhi.n	8001a06 <HAL_CAN_IRQHandler+0x334>
 80019b0:	2b40      	cmp	r3, #64	; 0x40
 80019b2:	d019      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x316>
 80019b4:	2b40      	cmp	r3, #64	; 0x40
 80019b6:	d826      	bhi.n	8001a06 <HAL_CAN_IRQHandler+0x334>
 80019b8:	2b30      	cmp	r3, #48	; 0x30
 80019ba:	d010      	beq.n	80019de <HAL_CAN_IRQHandler+0x30c>
 80019bc:	2b30      	cmp	r3, #48	; 0x30
 80019be:	d822      	bhi.n	8001a06 <HAL_CAN_IRQHandler+0x334>
 80019c0:	2b10      	cmp	r3, #16
 80019c2:	d002      	beq.n	80019ca <HAL_CAN_IRQHandler+0x2f8>
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d005      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019c8:	e01d      	b.n	8001a06 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	f043 0308 	orr.w	r3, r3, #8
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019d2:	e019      	b.n	8001a08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	f043 0310 	orr.w	r3, r3, #16
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019dc:	e014      	b.n	8001a08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f043 0320 	orr.w	r3, r3, #32
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019e6:	e00f      	b.n	8001a08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019f0:	e00a      	b.n	8001a08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019fa:	e005      	b.n	8001a08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a04:	e000      	b.n	8001a08 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a06:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a16:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f867 	bl	8001b06 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4906      	ldr	r1, [pc, #24]	; (8001bb0 <__NVIC_EnableIRQ+0x34>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff90 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff2d 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff42 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff90 	bl	8001c08 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5f 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff35 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffa2 	bl	8001c6c <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b08b      	sub	sp, #44	; 0x2c
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	e169      	b.n	800201c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 8158 	bne.w	8002016 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4a9a      	ldr	r2, [pc, #616]	; (8001fd4 <HAL_GPIO_Init+0x2a0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d05e      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d70:	4a98      	ldr	r2, [pc, #608]	; (8001fd4 <HAL_GPIO_Init+0x2a0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d875      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d76:	4a98      	ldr	r2, [pc, #608]	; (8001fd8 <HAL_GPIO_Init+0x2a4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d058      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d7c:	4a96      	ldr	r2, [pc, #600]	; (8001fd8 <HAL_GPIO_Init+0x2a4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d86f      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d82:	4a96      	ldr	r2, [pc, #600]	; (8001fdc <HAL_GPIO_Init+0x2a8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d052      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d88:	4a94      	ldr	r2, [pc, #592]	; (8001fdc <HAL_GPIO_Init+0x2a8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d869      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d8e:	4a94      	ldr	r2, [pc, #592]	; (8001fe0 <HAL_GPIO_Init+0x2ac>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04c      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d94:	4a92      	ldr	r2, [pc, #584]	; (8001fe0 <HAL_GPIO_Init+0x2ac>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d863      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d9a:	4a92      	ldr	r2, [pc, #584]	; (8001fe4 <HAL_GPIO_Init+0x2b0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d046      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001da0:	4a90      	ldr	r2, [pc, #576]	; (8001fe4 <HAL_GPIO_Init+0x2b0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d85d      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001da6:	2b12      	cmp	r3, #18
 8001da8:	d82a      	bhi.n	8001e00 <HAL_GPIO_Init+0xcc>
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d859      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001dae:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <HAL_GPIO_Init+0x80>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001e2f 	.word	0x08001e2f
 8001db8:	08001e09 	.word	0x08001e09
 8001dbc:	08001e1b 	.word	0x08001e1b
 8001dc0:	08001e5d 	.word	0x08001e5d
 8001dc4:	08001e63 	.word	0x08001e63
 8001dc8:	08001e63 	.word	0x08001e63
 8001dcc:	08001e63 	.word	0x08001e63
 8001dd0:	08001e63 	.word	0x08001e63
 8001dd4:	08001e63 	.word	0x08001e63
 8001dd8:	08001e63 	.word	0x08001e63
 8001ddc:	08001e63 	.word	0x08001e63
 8001de0:	08001e63 	.word	0x08001e63
 8001de4:	08001e63 	.word	0x08001e63
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e63 	.word	0x08001e63
 8001df0:	08001e63 	.word	0x08001e63
 8001df4:	08001e63 	.word	0x08001e63
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e25 	.word	0x08001e25
 8001e00:	4a79      	ldr	r2, [pc, #484]	; (8001fe8 <HAL_GPIO_Init+0x2b4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e06:	e02c      	b.n	8001e62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e029      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	3304      	adds	r3, #4
 8001e16:	623b      	str	r3, [r7, #32]
          break;
 8001e18:	e024      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	3308      	adds	r3, #8
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e01f      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	330c      	adds	r3, #12
 8001e2a:	623b      	str	r3, [r7, #32]
          break;
 8001e2c:	e01a      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e36:	2304      	movs	r3, #4
 8001e38:	623b      	str	r3, [r7, #32]
          break;
 8001e3a:	e013      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e44:	2308      	movs	r3, #8
 8001e46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	611a      	str	r2, [r3, #16]
          break;
 8001e4e:	e009      	b.n	8001e64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e50:	2308      	movs	r3, #8
 8001e52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	615a      	str	r2, [r3, #20]
          break;
 8001e5a:	e003      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          break;
 8001e62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	; 0xff
 8001e68:	d801      	bhi.n	8001e6e <HAL_GPIO_Init+0x13a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	e001      	b.n	8001e72 <HAL_GPIO_Init+0x13e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3304      	adds	r3, #4
 8001e72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	; 0xff
 8001e78:	d802      	bhi.n	8001e80 <HAL_GPIO_Init+0x14c>
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	e002      	b.n	8001e86 <HAL_GPIO_Init+0x152>
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	3b08      	subs	r3, #8
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	210f      	movs	r1, #15
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	401a      	ands	r2, r3
 8001e98:	6a39      	ldr	r1, [r7, #32]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80b1 	beq.w	8002016 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb4:	4b4d      	ldr	r3, [pc, #308]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a4c      	ldr	r2, [pc, #304]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b4a      	ldr	r3, [pc, #296]	; (8001fec <HAL_GPIO_Init+0x2b8>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ecc:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a40      	ldr	r2, [pc, #256]	; (8001ff4 <HAL_GPIO_Init+0x2c0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_GPIO_Init+0x1ec>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3f      	ldr	r2, [pc, #252]	; (8001ff8 <HAL_GPIO_Init+0x2c4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00d      	beq.n	8001f1c <HAL_GPIO_Init+0x1e8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3e      	ldr	r2, [pc, #248]	; (8001ffc <HAL_GPIO_Init+0x2c8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0x1e4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3d      	ldr	r2, [pc, #244]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_GPIO_Init+0x1e0>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e006      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f14:	2304      	movs	r3, #4
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f20:	2300      	movs	r3, #0
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f32:	492f      	ldr	r1, [pc, #188]	; (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	492c      	ldr	r1, [pc, #176]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4928      	ldr	r1, [pc, #160]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	4922      	ldr	r1, [pc, #136]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	491e      	ldr	r1, [pc, #120]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4918      	ldr	r1, [pc, #96]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4914      	ldr	r1, [pc, #80]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d021      	beq.n	8002008 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	490e      	ldr	r1, [pc, #56]	; (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e021      	b.n	8002016 <HAL_GPIO_Init+0x2e2>
 8001fd2:	bf00      	nop
 8001fd4:	10320000 	.word	0x10320000
 8001fd8:	10310000 	.word	0x10310000
 8001fdc:	10220000 	.word	0x10220000
 8001fe0:	10210000 	.word	0x10210000
 8001fe4:	10120000 	.word	0x10120000
 8001fe8:	10110000 	.word	0x10110000
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	40010c00 	.word	0x40010c00
 8001ffc:	40011000 	.word	0x40011000
 8002000:	40011400 	.word	0x40011400
 8002004:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_GPIO_Init+0x304>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	43db      	mvns	r3, r3
 8002010:	4909      	ldr	r1, [pc, #36]	; (8002038 <HAL_GPIO_Init+0x304>)
 8002012:	4013      	ands	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	3301      	adds	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	fa22 f303 	lsr.w	r3, r2, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	f47f ae8e 	bne.w	8001d48 <HAL_GPIO_Init+0x14>
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	372c      	adds	r7, #44	; 0x2c
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
 8002048:	4613      	mov	r3, r2
 800204a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002058:	e003      	b.n	8002062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	041a      	lsls	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43d9      	mvns	r1, r3
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	400b      	ands	r3, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	611a      	str	r2, [r3, #16]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e272      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8087 	beq.w	80021ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c0:	4b92      	ldr	r3, [pc, #584]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d00c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020cc:	4b8f      	ldr	r3, [pc, #572]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d112      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
 80020d8:	4b8c      	ldr	r3, [pc, #560]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d10b      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e6:	4b89      	ldr	r3, [pc, #548]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d06c      	beq.n	80021cc <HAL_RCC_OscConfig+0x12c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d168      	bne.n	80021cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e24c      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x76>
 8002108:	4b80      	ldr	r3, [pc, #512]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a7f      	ldr	r2, [pc, #508]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e02e      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x98>
 800211e:	4b7b      	ldr	r3, [pc, #492]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7a      	ldr	r2, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b78      	ldr	r3, [pc, #480]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a77      	ldr	r2, [pc, #476]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0xbc>
 8002142:	4b72      	ldr	r3, [pc, #456]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a71      	ldr	r2, [pc, #452]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6f      	ldr	r3, [pc, #444]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6e      	ldr	r2, [pc, #440]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 800215c:	4b6b      	ldr	r3, [pc, #428]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6a      	ldr	r2, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b68      	ldr	r3, [pc, #416]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a67      	ldr	r2, [pc, #412]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe fe82 	bl	8000e84 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe fe7e 	bl	8000e84 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e200      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xe4>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe fe6e 	bl	8000e84 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7fe fe6a 	bl	8000e84 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1ec      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x10c>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
 80021f2:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1c0      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4939      	ldr	r1, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fe23 	bl	8000e84 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002242:	f7fe fe1f 	bl	8000e84 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1a1      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4927      	ldr	r1, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fe02 	bl	8000e84 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe fdfe 	bl	8000e84 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e180      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03a      	beq.n	8002324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7fe fde2 	bl	8000e84 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe fdde 	bl	8000e84 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e160      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f000 fa9c 	bl	8002820 <RCC_Delay>
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7fe fdc8 	bl	8000e84 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f6:	e00f      	b.n	8002318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7fe fdc4 	bl	8000e84 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d908      	bls.n	8002318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e146      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	42420000 	.word	0x42420000
 8002314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b92      	ldr	r3, [pc, #584]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e9      	bne.n	80022f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a6 	beq.w	800247e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10d      	bne.n	800235e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b88      	ldr	r3, [pc, #544]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a87      	ldr	r2, [pc, #540]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b85      	ldr	r3, [pc, #532]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b82      	ldr	r3, [pc, #520]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d118      	bne.n	800239c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b7f      	ldr	r3, [pc, #508]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7e      	ldr	r2, [pc, #504]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7fe fd85 	bl	8000e84 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237e:	f7fe fd81 	bl	8000e84 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b64      	cmp	r3, #100	; 0x64
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e103      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	4b75      	ldr	r3, [pc, #468]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x312>
 80023a4:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e02d      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x334>
 80023ba:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a66      	ldr	r2, [pc, #408]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	e01c      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d10c      	bne.n	80023f6 <HAL_RCC_OscConfig+0x356>
 80023dc:	4b61      	ldr	r3, [pc, #388]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a60      	ldr	r2, [pc, #384]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a5d      	ldr	r2, [pc, #372]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	e00b      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a5a      	ldr	r2, [pc, #360]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	4b58      	ldr	r3, [pc, #352]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a57      	ldr	r2, [pc, #348]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7fe fd35 	bl	8000e84 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe fd31 	bl	8000e84 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0b1      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ee      	beq.n	800241e <HAL_RCC_OscConfig+0x37e>
 8002440:	e014      	b.n	800246c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe fd1f 	bl	8000e84 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe fd1b 	bl	8000e84 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e09b      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	4b40      	ldr	r3, [pc, #256]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a3b      	ldr	r2, [pc, #236]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8087 	beq.w	8002596 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b08      	cmp	r3, #8
 8002492:	d061      	beq.n	8002558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d146      	bne.n	800252a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fcef 	bl	8000e84 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fceb 	bl	8000e84 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e06d      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d108      	bne.n	80024e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4921      	ldr	r1, [pc, #132]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e4:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a19      	ldr	r1, [r3, #32]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	430b      	orrs	r3, r1
 80024f6:	491b      	ldr	r1, [pc, #108]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fcbf 	bl	8000e84 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7fe fcbb 	bl	8000e84 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e03d      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x46a>
 8002528:	e035      	b.n	8002596 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fca8 	bl	8000e84 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe fca4 	bl	8000e84 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e026      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x498>
 8002556:	e01e      	b.n	8002596 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d107      	bne.n	8002570 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e019      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000
 800256c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x500>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0d0      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d910      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4965      	ldr	r1, [pc, #404]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0b8      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800260a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	494d      	ldr	r1, [pc, #308]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d040      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d115      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07f      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e073      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06b      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4936      	ldr	r1, [pc, #216]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7fe fbf6 	bl	8000e84 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7fe fbf2 	bl	8000e84 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e053      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d210      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4922      	ldr	r1, [pc, #136]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e032      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4916      	ldr	r1, [pc, #88]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002732:	f000 f821 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	490a      	ldr	r1, [pc, #40]	; (800276c <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1cc>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fb54 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40022000 	.word	0x40022000
 8002768:	40021000 	.word	0x40021000
 800276c:	080028d0 	.word	0x080028d0
 8002770:	20000010 	.word	0x20000010
 8002774:	20000014 	.word	0x20000014

08002778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_RCC_GetSysClockFreq+0x94>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x30>
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x36>
 80027a6:	e027      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_GetSysClockFreq+0x98>)
 80027aa:	613b      	str	r3, [r7, #16]
      break;
 80027ac:	e027      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	0c9b      	lsrs	r3, r3, #18
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d010      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_RCC_GetSysClockFreq+0x94>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0c5b      	lsrs	r3, r3, #17
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	4a11      	ldr	r2, [pc, #68]	; (8002818 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <HAL_RCC_GetSysClockFreq+0x98>)
 80027da:	fb03 f202 	mul.w	r2, r3, r2
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e004      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a0c      	ldr	r2, [pc, #48]	; (800281c <HAL_RCC_GetSysClockFreq+0xa4>)
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	613b      	str	r3, [r7, #16]
      break;
 80027f6:	e002      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fa:	613b      	str	r3, [r7, #16]
      break;
 80027fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fe:	693b      	ldr	r3, [r7, #16]
}
 8002800:	4618      	mov	r0, r3
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	007a1200 	.word	0x007a1200
 8002814:	080028e0 	.word	0x080028e0
 8002818:	080028f0 	.word	0x080028f0
 800281c:	003d0900 	.word	0x003d0900

08002820 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <RCC_Delay+0x34>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <RCC_Delay+0x38>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a5b      	lsrs	r3, r3, #9
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800283c:	bf00      	nop
  }
  while (Delay --);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e5a      	subs	r2, r3, #1
 8002842:	60fa      	str	r2, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <RCC_Delay+0x1c>
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	20000010 	.word	0x20000010
 8002858:	10624dd3 	.word	0x10624dd3

0800285c <memset>:
 800285c:	4603      	mov	r3, r0
 800285e:	4402      	add	r2, r0
 8002860:	4293      	cmp	r3, r2
 8002862:	d100      	bne.n	8002866 <memset+0xa>
 8002864:	4770      	bx	lr
 8002866:	f803 1b01 	strb.w	r1, [r3], #1
 800286a:	e7f9      	b.n	8002860 <memset+0x4>

0800286c <__libc_init_array>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	2600      	movs	r6, #0
 8002870:	4d0c      	ldr	r5, [pc, #48]	; (80028a4 <__libc_init_array+0x38>)
 8002872:	4c0d      	ldr	r4, [pc, #52]	; (80028a8 <__libc_init_array+0x3c>)
 8002874:	1b64      	subs	r4, r4, r5
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	42a6      	cmp	r6, r4
 800287a:	d109      	bne.n	8002890 <__libc_init_array+0x24>
 800287c:	f000 f81a 	bl	80028b4 <_init>
 8002880:	2600      	movs	r6, #0
 8002882:	4d0a      	ldr	r5, [pc, #40]	; (80028ac <__libc_init_array+0x40>)
 8002884:	4c0a      	ldr	r4, [pc, #40]	; (80028b0 <__libc_init_array+0x44>)
 8002886:	1b64      	subs	r4, r4, r5
 8002888:	10a4      	asrs	r4, r4, #2
 800288a:	42a6      	cmp	r6, r4
 800288c:	d105      	bne.n	800289a <__libc_init_array+0x2e>
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	f855 3b04 	ldr.w	r3, [r5], #4
 8002894:	4798      	blx	r3
 8002896:	3601      	adds	r6, #1
 8002898:	e7ee      	b.n	8002878 <__libc_init_array+0xc>
 800289a:	f855 3b04 	ldr.w	r3, [r5], #4
 800289e:	4798      	blx	r3
 80028a0:	3601      	adds	r6, #1
 80028a2:	e7f2      	b.n	800288a <__libc_init_array+0x1e>
 80028a4:	080028f4 	.word	0x080028f4
 80028a8:	080028f4 	.word	0x080028f4
 80028ac:	080028f4 	.word	0x080028f4
 80028b0:	080028f8 	.word	0x080028f8

080028b4 <_init>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	bf00      	nop
 80028b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ba:	bc08      	pop	{r3}
 80028bc:	469e      	mov	lr, r3
 80028be:	4770      	bx	lr

080028c0 <_fini>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr
